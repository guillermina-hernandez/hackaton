diff --git a//dev/null b/menu_principal.py
index 0000000000000000000000000000000000000000..953c372c5e59d0480fc076a4677fbe9b07d2de4a 100644
--- a//dev/null
+++ b/menu_principal.py
@@ -0,0 +1,169 @@
+import csv
+import datetime
+import os
+import requests
+try:
+    import google.generativeai as genai
+except ImportError:
+    genai = None
+
+HISTORY_FILE = 'historial_global.csv'
+
+# Nombre de usuario simulado (deberia venir del proceso de login)
+usuario_logueado = 'usuario_demo'
+
+# Clave de API para OpenWeatherMap (puede configurarse via variable de entorno)
+WEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY', 'tu_api_key_aqui')
+
+# Clave de API de Gemini (Google AI Studio)
+GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', 'tu_gemini_key_aqui')
+
+
+def consultar_clima_y_guardar():
+    ciudad = input('Ingrese la ciudad a consultar: ')
+    if not WEATHER_API_KEY or WEATHER_API_KEY == 'tu_api_key_aqui':
+        print('No se configuro la API key de OpenWeatherMap.')
+        return
+    url = f"https://api.openweathermap.org/data/2.5/weather?q={ciudad}&appid={WEATHER_API_KEY}&units=metric&lang=es"
+    try:
+        respuesta = requests.get(url)
+        datos = respuesta.json()
+    except Exception as e:
+        print('Error al consultar el clima:', e)
+        return
+    if respuesta.status_code != 200:
+        print('No se pudo obtener el clima de la ciudad.')
+        return
+
+    temp = datos['main']['temp']
+    feels = datos['main']['feels_like']
+    humidity = datos['main']['humidity']
+    description = datos['weather'][0]['description']
+    wind = datos['wind']['speed'] * 3.6  # m/s a km/h
+
+    print(f"Temperatura: {temp}°C (Sensación térmica {feels}°C)")
+    print(f"Humedad: {humidity}%")
+    print(f"Descripción: {description}")
+    print(f"Viento: {wind:.1f} km/h")
+
+    ahora = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
+    fila = [usuario_logueado, ciudad, ahora, temp, description, humidity, f"{wind:.1f}"]
+    escribir_en_historial(fila)
+
+
+def escribir_en_historial(fila):
+    nueva = not os.path.exists(HISTORY_FILE)
+    with open(HISTORY_FILE, 'a', newline='', encoding='utf-8') as f:
+        writer = csv.writer(f)
+        if nueva:
+            writer.writerow(['NombreDeUsuario', 'Ciudad', 'FechaHora', 'Temperatura_C',
+                             'Condicion_Clima', 'Humedad_Porcentaje', 'Viento_kmh'])
+        writer.writerow(fila)
+
+
+def ver_historial_personal():
+    ciudad = input('Ingrese la ciudad: ')
+    if not os.path.exists(HISTORY_FILE):
+        print('Aun no hay historial.')
+        return
+    with open(HISTORY_FILE, newline='', encoding='utf-8') as f:
+        reader = csv.DictReader(f)
+        registros = [r for r in reader if r['NombreDeUsuario'] == usuario_logueado and r['Ciudad'].lower() == ciudad.lower()]
+    for r in registros:
+        print(f"{r['FechaHora']} - {r['Temperatura_C']}°C - {r['Condicion_Clima']} - Humedad {r['Humedad_Porcentaje']}%")
+    if not registros:
+        print('No se encontraron registros para esa ciudad.')
+
+
+def estadisticas_globales():
+    if not os.path.exists(HISTORY_FILE):
+        print('No hay historial disponible.')
+        return
+    with open(HISTORY_FILE, newline='', encoding='utf-8') as f:
+        reader = list(csv.DictReader(f))
+    total = len(reader)
+    if total == 0:
+        print('Historial vacío.')
+        return
+    ciudades = {}
+    temp_sum = 0
+    for r in reader:
+        ciudad = r['Ciudad']
+        ciudades[ciudad] = ciudades.get(ciudad, 0) + 1
+        temp_sum += float(r['Temperatura_C'])
+    ciudad_mas_consultada = max(ciudades, key=ciudades.get)
+    temp_promedio = temp_sum / total
+    print(f"Ciudad más consultada: {ciudad_mas_consultada}")
+    print(f"Número total de consultas: {total}")
+    print(f"Temperatura promedio registrada: {temp_promedio:.2f}°C")
+
+
+def consejo_ia():
+    if genai is None:
+        print('La libreria google-generativeai no esta instalada.')
+        return
+    if not os.path.exists(HISTORY_FILE):
+        print('No hay historial para usar en el consejo.')
+        return
+    with open(HISTORY_FILE, newline='', encoding='utf-8') as f:
+        reader = list(csv.DictReader(f))
+    registros_usuario = [r for r in reader if r['NombreDeUsuario'] == usuario_logueado]
+    if not registros_usuario:
+        print('No hay registros del usuario.')
+        return
+    ultimo = registros_usuario[-1]
+    prompt = (
+        f"Ciudad: {ultimo['Ciudad']}, Condicion: {ultimo['Condicion_Clima']}, "
+        f"Temperatura: {ultimo['Temperatura_C']}°C, Humedad: {ultimo['Humedad_Porcentaje']}%. "
+        "Consejo breve de vestimenta:" )
+    try:
+        genai.configure(api_key=GEMINI_API_KEY)
+        model = genai.GenerativeModel('gemini-pro')
+        respuesta = model.generate_content(prompt)
+        print('Consejo IA:', respuesta.text)
+    except Exception as e:
+        print('Error al obtener consejo:', e)
+
+
+def acerca_de():
+    print('--- GuardiánClima ITBA ---')
+    print('Aplicacion para consultar el clima y obtener consejos de vestimenta.')
+    print('Desarrolladores: Equipo Demo')
+    print('Menu de opciones:')
+    print('1. Consultar Clima Actual y Guardar en Historial Global')
+    print('2. Ver Mi Historial Personal de Consultas por Ciudad')
+    print('3. Estadísticas Globales de Uso y Exportar Historial Completo')
+    print('4. Consejo IA: ¿Cómo Me Visto Hoy?')
+    print('5. Acerca De...')
+    print('6. Cerrar Sesión')
+
+
+def menu_principal():
+    while True:
+        print('\n--- Menú Principal ---')
+        print('1. Consultar Clima Actual y Guardar en Historial Global')
+        print('2. Ver Mi Historial Personal de Consultas por Ciudad')
+        print('3. Estadísticas Globales de Uso y Exportar Historial Completo')
+        print('4. Consejo IA: ¿Cómo Me Visto Hoy?')
+        print('5. Acerca De...')
+        print('6. Cerrar Sesión')
+        opcion = input('Seleccione una opción: ')
+        if opcion == '1':
+            consultar_clima_y_guardar()
+        elif opcion == '2':
+            ver_historial_personal()
+        elif opcion == '3':
+            estadisticas_globales()
+        elif opcion == '4':
+            consejo_ia()
+        elif opcion == '5':
+            acerca_de()
+        elif opcion == '6':
+            print('Cerrando sesión...')
+            break
+        else:
+            print('Opción no válida.')
+
+
+if __name__ == '__main__':
+    menu_principal()
